{
	"info": {
		"_postman_id": "0e912585-7d51-44f0-8eec-7e7e424748a9",
		"name": "jsonplaceholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15491437"
	},
	"item": [
		{
			"name": "Posts Request",
			"item": [
				{
					"name": "All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 3 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 100000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(100000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item ${i} - body`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the array are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/posts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {\r",
									"        pm.expect(jsonData.userId).to.be.a('number');\r",
									"        pm.expect(jsonData.id).to.be.a('number');\r",
									"        pm.expect(jsonData.title).to.be.a('string');\r",
									"        pm.expect(jsonData.body).to.be.a('string');\r",
									"\r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"console.log();\r",
									"console.log(\"Body Data\");\r",
									"console.log(\"User ID:\", jsonData.userId);\r",
									"console.log(\"ID:\", jsonData.id);\r",
									"console.log(\"Title:\", jsonData.title);\r",
									"console.log(\"Body:\", jsonData.body);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/posts/5",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.postId, `Item ${i} - postId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.email).to.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
									"        pm.expect(item.body, `Item ${i} - body`).to.be.a('string');\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Validate Data Types:\");\r",
									"    console.log(\"Data types of all the items in the body array are valid\");\r",
									"});\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.text().length + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/posts/5/comments",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"5",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "From Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const postId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${postId}`);  // âœ… This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.postId, `Item ${i} - postId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${i} - email`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item ${i} - body`).to.be.a('string');\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Validate Data Types:\");\r",
									"    console.log(\"Data types of all the items in the body array are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code); \r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/comments?postId={{postId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "From ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const id = pm.variables.get(\"id\");\r",
									"console.log();\r",
									"console.log(`Running test for ID = ${id}`);  // âœ… This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {\r",
									"        pm.expect(jsonData[0].postId).to.be.a('number');\r",
									"        pm.expect(jsonData[0].id).to.be.a('number');\r",
									"        pm.expect(jsonData[0].name).to.be.a('string');\r",
									"        pm.expect(jsonData[0].email).to.be.a('string');\r",
									"        pm.expect(jsonData[0].body).to.be.a('string');\r",
									"\r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code); \r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/comments?id={{Id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const PostId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${PostId}`);  // This prints in the Runner console\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 4 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {\r",
									"    // Data Types: check first item for expected fields\r",
									"    pm.expect(jsonData.userId).to.be.a('number');\r",
									"    pm.expect(jsonData.postId).to.be.a('number'); \r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.body).to.be.a('string'); \r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"\r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									" console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"\r",
									"//  Log Response Body\r",
									"console.log();\r",
									"console.log(\"Response Body\");\r",
									"console.log(\"ID: \", jsonData.id);\r",
									"console.log(\"User ID: \", jsonData.userId);\r",
									"console.log(\"Post ID: \", jsonData.postId);\r",
									"console.log(\"Title: \", jsonData.title);\r",
									"console.log(\"Body: \", jsonData.body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 1,\r\n  \"postId\": 21,\r\n  \"title\": \"This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.\",\r\n  \"body\": \"Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. \"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/posts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const PostId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${PostId}`);  // This prints in the Runner console\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {\r",
									"    // Data Types: check first item for expected fields\r",
									"    pm.expect(jsonData.userId).to.be.a('number');\r",
									"    pm.expect(jsonData.postId).to.be.a('number'); \r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.body).to.be.a('string'); \r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"    \r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									" console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code, \"OK\");\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"\r",
									"//  Log Response Body\r",
									"console.log();\r",
									"console.log(\"Response Body\");\r",
									"console.log(\"ID: \", jsonData.id);\r",
									"console.log(\"User ID: \", jsonData.userId);\r",
									"console.log(\"Post ID: \", jsonData.postId);\r",
									"console.log(\"Title: \", jsonData.title);\r",
									"console.log(\"Body: \", jsonData.body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 11,\r\n  \"postId\": 21,\r\n  \"title\": \"This handout will help you understand how paragraphs are formed, how to develop stronger paragraphs, and how to completely and clearly express your ideas.\",\r\n  \"body\": \"Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. In reality, though, the unity and coherence of ideas among sentences is what constitutes a paragraph. \"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/posts/{{postId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const PostId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${PostId}`);  // This prints in the Runner console\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body data\r",
									"pm.test(\"Validate data types of the body\", () => {\r",
									"    // Data Types: check first item for expected fields\r",
									"    pm.expect(jsonData.userId).to.be.a('number');\r",
									"    pm.expect(jsonData.postId).to.be.a('number'); \r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.body).to.be.a('string'); \r",
									"\r",
									"    \r",
									"    console.log();\r",
									"    console.log(\"Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									" console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code, \"OK\");\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"\r",
									"//  Log Response Body\r",
									"console.log();\r",
									"console.log(\"Response Body\");\r",
									"console.log(\"ID: \", jsonData.id);\r",
									"console.log(\"User ID: \", jsonData.userId);\r",
									"console.log(\"Post ID: \", jsonData.postId);\r",
									"console.log(\"Title: \", jsonData.title);\r",
									"console.log(\"Body: \", jsonData.body);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 14,\r\n  \"postId\": 2,\r\n  \"title\": \"This handout will help you understand how paragraphs are formed\",\r\n  \"body\": \"Paragraphs are the building blocks of papers. Many students define paragraphs in terms of length: a paragraph is a group of at least five sentences, a paragraph is half a page long, etc. \"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/posts/{{postId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const PostId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${PostId}`);  // This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data \r",
									"\r",
									"if (Object.keys(jsonData).length === 0) {\r",
									"    console.log(\"Data Deleted â€“ Empty object received.\");\r",
									"} else {\r",
									"    console.log(\"Data Not Deleted â€“ Response is not empty:\", jsonData);\r",
									"}\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									" console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code, \"OK\");\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/posts/{{postId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Nested Requests",
			"item": [
				{
					"name": "Post Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.postId, `Item ${i} - postId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${i} - email`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item ${i} - body`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/posts/1/comments",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const PostId = pm.variables.get(\"postId\");\r",
									"console.log();\r",
									"console.log(`Running test for postId = ${PostId}`);  // This prints in the Runner console\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.postId, `Item ${i} - postId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${i} - email`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item ${i} - body`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/posts/{{postId}}/comments",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"posts",
								"{{postId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Photos from Albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"    //URL pattern\r",
									"    const urlPattern = /https?:\\/\\/[\\w.-]+(?:\\.[\\w.-]+)+(?:[\\w\\-._~:/?#[\\]@!$&'()*+,;=]+)?/;\r",
									"\r",
									"        pm.expect(item.albumId, `Item ${i} - albumId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.url, `Item${i} - url`).to.be.a('string');\r",
									"        pm.expect(item.url.startsWith(\"http\")).to.be.true;\r",
									"        pm.expect(item.thumbnailUrl, `Item ${i} - thumbnailUrl`).to.match(urlPattern);\r",
									"        pm.expect(item.thumbnailUrl.startsWith(\"http\")).to.be.true;\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/albums/1/photos",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"albums",
								"1",
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Photos from random AlbumID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const albumId = pm.variables.get(\"albumId\"); // Fixed reference error\r",
									"console.log();\r",
									"console.log(`Running test for albumId = ${albumId}`);  // This prints in the Runner console\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"    //URL pattern\r",
									"    const urlPattern = /https?:\\/\\/[\\w.-]+(?:\\.[\\w.-]+)+(?:[\\w\\-._~:/?#[\\]@!$&'()*+,;=]+)?/;\r",
									"\r",
									"        pm.expect(item.albumId, `Item ${i} - albumId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.url, `Item${i} - url`).to.be.a('string');\r",
									"        pm.expect(item.url.startsWith(\"http\")).to.be.true;\r",
									"        pm.expect(item.thumbnailUrl, `Item ${i} - thumbnailUrl`).to.match(urlPattern);\r",
									"        pm.expect(item.thumbnailUrl.startsWith(\"http\")).to.be.true;\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/albums/{{albumId}}/photos",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"albums",
								"{{albumId}}",
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "ToDo from UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.completed, `Item${i} - completed`).to.be.a('boolean');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/1/todos",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"1",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "ToDo from Random UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const userId = pm.variables.get(\"userId\");\r",
									"console.log();\r",
									"console.log(`Running test for User ID = ${userId}`);  // This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.completed, `Item${i} - completed`).to.be.a('boolean');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"TESTS:\");\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}}/todos",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts from UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item${i} - body`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/1/posts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts from Random UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const userId = pm.variables.get(\"userId\");\r",
									"console.log();\r",
									"console.log(`Running test for User ID = ${userId}`);  // This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i]; \r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"        pm.expect(item.body, `Item${i} - body`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}}/posts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"const item = jsonData;\r",
									"\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    jsonData.forEach((item, index) => {\r",
									"        // Top-level fields\r",
									"        pm.expect(item.id, `Item ${index} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${index} - name`).to.be.a('string');\r",
									"        pm.expect(item.username, `Item ${index} - username`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${index} - email`).to.be.a('string');\r",
									"\r",
									"        // Address object\r",
									"        pm.expect(item.address, `Item ${index} - address`).to.be.an('object');\r",
									"        pm.expect(item.address.street, `Item ${index} - street`).to.be.a('string');\r",
									"        pm.expect(item.address.suite, `Item ${index} - suite`).to.be.a('string');\r",
									"        pm.expect(item.address.city, `Item ${index} - city`).to.be.a('string');\r",
									"        pm.expect(item.address.zipcode, `Item ${index} - zipcode`).to.be.a('string');\r",
									"        \r",
									"        // Geo inside address\r",
									"        pm.expect(item.address.geo, `Item ${index} - geo`).to.be.an('object');\r",
									"        pm.expect(item.address.geo.lat, `Item ${index} - lat`).to.be.a('string');\r",
									"        pm.expect(item.address.geo.lng, `Item ${index} - lng`).to.be.a('string');\r",
									"\r",
									"        //after geo\r",
									"        pm.expect(item.phone, `Item ${index} - phone`).to.be.a('string');\r",
									"        pm.expect(item.website, `Item ${index} - website`).to.be.a('string');\r",
									"\r",
									"        // Company object\r",
									"        pm.expect(item.company, `Item ${index} - company`).to.be.an('object');\r",
									"        pm.expect(item.company.name, `Item ${index} - company name`).to.be.a('string');\r",
									"        pm.expect(item.company.catchPhrase, `Item ${index} - catchPhrase`).to.be.a('string');\r",
									"        pm.expect(item.company.bs, `Item ${index} - bs`).to.be.a('string');\r",
									"    });\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid.\");\r",
									"});\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users from UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        // Top-level fields\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.username, `Item ${i} - username`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${i} - email`).to.be.a('string');\r",
									"\r",
									"        // Address object\r",
									"        pm.expect(item.address, `Item ${i} - address`).to.be.an('object');\r",
									"        pm.expect(item.address.street, `Item ${i} - street`).to.be.a('string');\r",
									"        pm.expect(item.address.suite, `Item ${i} - suite`).to.be.a('string');\r",
									"        pm.expect(item.address.city, `Item ${i} - city`).to.be.a('string');\r",
									"        pm.expect(item.address.zipcode, `Item ${i} - zipcode`).to.be.a('string');\r",
									"        \r",
									"        // Geo inside address\r",
									"        pm.expect(item.address.geo, `Item ${i} - geo`).to.be.an('object');\r",
									"        pm.expect(item.address.geo.lat, `Item ${i} - lat`).to.be.a('string');\r",
									"        pm.expect(item.address.geo.lng, `Item ${i} - lng`).to.be.a('string');\r",
									"\r",
									"        //after geo\r",
									"        pm.expect(item.phone, `Item ${i} - phone`).to.be.a('string');\r",
									"        pm.expect(item.website, `Item ${i} - website`).to.be.a('string');\r",
									"\r",
									"        // Company object\r",
									"        pm.expect(item.company, `Item ${i} - company`).to.be.an('object');\r",
									"        pm.expect(item.company.name, `Item ${i} - company name`).to.be.a('string');\r",
									"        pm.expect(item.company.catchPhrase, `Item ${i} - catchPhrase`).to.be.a('string');\r",
									"        pm.expect(item.company.bs, `Item ${i} - bs`).to.be.a('string');\r",
									"    };\r",
									"\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid.\");\r",
									"});\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"// Body Data\r",
									"console.log();\r",
									"console.log(\"User Info:\");\r",
									"console.log(\"ID:\", jsonData.id);\r",
									"console.log(\"Name:\", jsonData.name);\r",
									"console.log(\"Username:\", jsonData.username);\r",
									"console.log(\"Email:\", jsonData.email);\r",
									"console.log(\"Address\");\r",
									"console.log(\"Street:\", jsonData.address.street);\r",
									"console.log(\"Suite:\", jsonData.address.suite);\r",
									"console.log(\"City:\", jsonData.address.city);\r",
									"console.log(\"Zipcode:\", jsonData.address.zipcode);\r",
									"console.log(\"Geo\");\r",
									"console.log(\"Lat:\", jsonData.address.geo.lat);  \r",
									"console.log(\"Lng:\", jsonData.address.geo.lng);\r",
									"console.log(\"Phone:\", jsonData.phone);\r",
									"console.log(\"Website:\", jsonData.website);\r",
									"console.log(\"Company\");\r",
									"console.log(\"Name:\", jsonData.company.name);\r",
									"console.log(\"CatchPhrase:\", jsonData.company.catchPhrase);\r",
									"console.log(\"Bs:\", jsonData.company.bs);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/2",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "User from Random UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const userId = pm.variables.get(\"userId\");\r",
									"console.log();\r",
									"console.log(`Running test for User ID = ${userId}`);  // This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        // Top-level fields\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.name, `Item ${i} - name`).to.be.a('string');\r",
									"        pm.expect(item.username, `Item ${i} - username`).to.be.a('string');\r",
									"        pm.expect(item.email, `Item ${i} - email`).to.be.a('string');\r",
									"\r",
									"        // Address object\r",
									"        pm.expect(item.address, `Item ${i} - address`).to.be.an('object');\r",
									"        pm.expect(item.address.street, `Item ${i} - street`).to.be.a('string');\r",
									"        pm.expect(item.address.suite, `Item ${i} - suite`).to.be.a('string');\r",
									"        pm.expect(item.address.city, `Item ${i} - city`).to.be.a('string');\r",
									"        pm.expect(item.address.zipcode, `Item ${i} - zipcode`).to.be.a('string');\r",
									"        \r",
									"        // Geo inside address\r",
									"        pm.expect(item.address.geo, `Item ${i} - geo`).to.be.an('object');\r",
									"        pm.expect(item.address.geo.lat, `Item ${i} - lat`).to.be.a('string');\r",
									"        pm.expect(item.address.geo.lng, `Item ${i} - lng`).to.be.a('string');\r",
									"\r",
									"        //after geo\r",
									"        pm.expect(item.phone, `Item ${i} - phone`).to.be.a('string');\r",
									"        pm.expect(item.website, `Item ${i} - website`).to.be.a('string');\r",
									"\r",
									"        // Company object\r",
									"        pm.expect(item.company, `Item ${i} - company`).to.be.an('object');\r",
									"        pm.expect(item.company.name, `Item ${i} - company name`).to.be.a('string');\r",
									"        pm.expect(item.company.catchPhrase, `Item ${i} - catchPhrase`).to.be.a('string');\r",
									"        pm.expect(item.company.bs, `Item ${i} - bs`).to.be.a('string');\r",
									"    };\r",
									"    \r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid.\");\r",
									"});\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									"\r",
									"\r",
									"// Body Data\r",
									"console.log();\r",
									"console.log(\"User Info:\");\r",
									"console.log(\"ID:\", jsonData.id);\r",
									"console.log(\"Name:\", jsonData.name);\r",
									"console.log(\"Username:\", jsonData.username);\r",
									"console.log(\"Email:\", jsonData.email);\r",
									"console.log(\"Address\");\r",
									"console.log(\"Street:\", jsonData.address.street);\r",
									"console.log(\"Suite:\", jsonData.address.suite);\r",
									"console.log(\"City:\", jsonData.address.city);\r",
									"console.log(\"Zipcode:\", jsonData.address.zipcode);\r",
									"console.log(\"Geo\");\r",
									"console.log(\"Lat:\", jsonData.address.geo.lat);  \r",
									"console.log(\"Lng:\", jsonData.address.geo.lng);\r",
									"console.log(\"Phone:\", jsonData.phone);\r",
									"console.log(\"Website:\", jsonData.website);\r",
									"console.log(\"Company\");\r",
									"console.log(\"Name:\", jsonData.company.name);\r",
									"console.log(\"CatchPhrase:\", jsonData.company.catchPhrase);\r",
									"console.log(\"Bs:\", jsonData.company.bs);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Albums from UserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid.\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/1/albums",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"1",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Album from Random UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"const userId = pm.variables.get(\"userId\");\r",
									"console.log();\r",
									"console.log(`Running test for User ID = ${userId}`);  // This prints in the Runner console\r",
									"\r",
									"\r",
									"//  Tests\r",
									"//status Code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Content Type\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Response time\r",
									"pm.test(\"Response time is less than 2 seconds \", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//Response Size\r",
									"pm.test(\"Response size is less than 10000 Bytes\", function () {\r",
									"    pm.expect(pm.response.size().body).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Validate data types of body\r",
									"pm.test(\"Validate data types of the body\", () => {   \r",
									"    let i = 0;\r",
									"\r",
									"    while (i < jsonData.length) {\r",
									"        let item = jsonData[i];\r",
									"\r",
									"        pm.expect(item.userId, `Item ${i} - userId`).to.be.a('number');\r",
									"        pm.expect(item.id, `Item ${i} - id`).to.be.a('number');\r",
									"        pm.expect(item.title, `Item ${i} - title`).to.be.a('string');\r",
									"\r",
									"        i++;\r",
									"    }\r",
									"    console.log();\r",
									"    console.log(\"Body Validation: Data types of all items in the body are valid.\");\r",
									"});\r",
									"\r",
									"\r",
									"//  Log Summary Info\r",
									"console.log();\r",
									"console.log(\"Summary Info\");\r",
									"console.log(\"Status Code:\", pm.response.code);\r",
									"console.log(\"Response Time:\", pm.response.responseTime + \"ms\");\r",
									"console.log(\"Response Size:\", pm.response.size().body + \" bytes\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId}}/albums",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"albums"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}